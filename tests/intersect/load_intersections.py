import bpy
from mathutils import Vector

# Path to the intersections text file generated by test_intersect_fn
FILE_PATH = r"C:\\Users\\Kailen\\RayTracer\\intersections.txt"

CYL_RADIUS = 0.02
CREATE_COLLECTION = True
COLLECTION_NAME = "IntersectRays"


def ensure_collection(name):
    coll = bpy.data.collections.get(name)
    if coll is None:
        coll = bpy.data.collections.new(name)
        bpy.context.scene.collection.children.link(coll)
    return coll


def link_to_collection(obj, collection):
    if collection is None:
        return
    for c in obj.users_collection:
        c.objects.unlink(obj)
    collection.objects.link(obj)


def draw_segment(origin: Vector, direction: Vector, length: float, name: str, coll=None):
    if direction.length == 0.0 or length <= 0.0:
        return None
    dir_unit = direction.normalized()
    end = origin + dir_unit * length
    mid = origin + dir_unit * (length * 0.5)
    bpy.ops.mesh.primitive_cylinder_add(radius=CYL_RADIUS, depth=length, location=mid)
    cyl = bpy.context.active_object
    cyl.name = name
    rot_quat = Vector((0.0, 0.0, 1.0)).rotation_difference(dir_unit)
    cyl.rotation_euler = rot_quat.to_euler()
    link_to_collection(cyl, coll)
    return cyl


def load_segments(filepath):
    segments = []  # (origin, direction, length)
    with open(filepath, 'r') as f:
        for line in f:
            line = line.strip()
            if not line or line.startswith('#'):
                continue
            parts = line.split()
            if len(parts) < 7:
                continue
            ox, oy, oz, dx, dy, dz, L = map(float, parts[:7])
            origin = Vector((ox, oy, oz))
            direction = Vector((dx, dy, dz))
            segments.append((origin, direction, L))
    return segments


def main():
    coll = ensure_collection(COLLECTION_NAME) if CREATE_COLLECTION else None
    if bpy.ops.object.mode_set.poll():
        try:
            bpy.ops.object.mode_set(mode='OBJECT')
        except Exception:
            pass

    segments = load_segments(FILE_PATH)
    for i, (o, d, L) in enumerate(segments):
        draw_segment(o, d, L, name=f"Seg_{i:04d}", coll=coll)

    print(f"Loaded {len(segments)} segments from {FILE_PATH}")


if __name__ == "__main__":
    main()


